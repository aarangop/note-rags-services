"""migrate_to_cognito_auth

Revision ID: b7b786355a46
Revises: 5f65a3c4dc55
Create Date: 2025-08-16 10:11:44.635736

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b7b786355a46"
down_revision: str | Sequence[str] | None = "5f65a3c4dc55"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("refresh_tokens")
    op.add_column("users", sa.Column("cognito_user_id", sa.String(length=255), nullable=False))
    op.create_unique_constraint(None, "users", ["cognito_user_id"])
    op.drop_column("users", "verification_expires")
    op.drop_column("users", "password_reset_token")
    op.drop_column("users", "password_reset_expires")
    op.drop_column("users", "verification_token")
    op.drop_column("users", "hashed_password")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column("hashed_password", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    )
    op.add_column(
        "users", sa.Column("verification_token", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "users",
        sa.Column(
            "password_reset_expires", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "users", sa.Column("password_reset_token", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "users",
        sa.Column(
            "verification_expires", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "users", type_="unique")
    op.drop_column("users", "cognito_user_id")
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("token_hash", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("is_revoked", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("revoked_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("ip_address", sa.VARCHAR(length=45), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("refresh_tokens_pkey")),
        sa.UniqueConstraint(
            "token_hash",
            name=op.f("refresh_tokens_token_hash_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
