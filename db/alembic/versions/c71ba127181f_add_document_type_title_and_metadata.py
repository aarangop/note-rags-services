"""Add document_type, title and metadata

Revision ID: c71ba127181f
Revises: cac7d9b1fa9d
Create Date: 2025-07-21 15:01:50.660956

"""

import os
from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision: str = "c71ba127181f"
down_revision: str | Sequence[str] | None = "cac7d9b1fa9d"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add the columns as nullable first
    op.add_column("documents", sa.Column("title", sa.String(length=500), nullable=True))
    op.add_column("documents", sa.Column("document_type", sa.String(length=64), nullable=True))
    op.add_column("documents", sa.Column("document_metadata", sa.JSON(), nullable=True))

    # Get database connection
    connection = op.get_bind()

    # Populate title and document_type for existing documents
    result = connection.execute(text("SELECT id, file_path FROM documents WHERE title IS NULL"))

    # Track titles to handle duplicates
    used_titles = set()

    for row in result:
        file_path = row.file_path
        if file_path:
            # Extract filename from path and remove extension
            base_title = os.path.splitext(os.path.basename(file_path))[0]

            # Handle duplicates by adding incremental numbers
            title = base_title
            counter = 1
            while title in used_titles:
                title = f"{base_title}_{counter}"
                counter += 1

            used_titles.add(title)

            # Determine document type based on file extension
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()
            if ext in [".md", ".txt", ".note"]:
                doc_type = "note"
            elif ext == ".pdf":
                doc_type = "pdf"
            elif ext in [".jpg", ".jpeg", ".png", ".gif", ".bmp"]:
                doc_type = "image"
            else:
                doc_type = "other"

            # Update the document
            connection.execute(
                text(
                    "UPDATE documents SET title = :title, document_type = :doc_type WHERE id = :doc_id"
                ),
                {"title": title, "doc_type": doc_type, "doc_id": row.id},
            )
        else:
            # Handle documents with no file_path - use a default title
            title = f"untitled_document_{row.id}"
            connection.execute(
                text(
                    "UPDATE documents SET title = :title, document_type = :doc_type WHERE id = :doc_id"
                ),
                {"title": title, "doc_type": "other", "doc_id": row.id},
            )

    # Now make the required columns non-nullable
    op.alter_column("documents", "title", nullable=False)
    op.alter_column("documents", "document_type", nullable=False)

    # Create indexes
    op.create_index(
        op.f("ix_documents_document_type"), "documents", ["document_type"], unique=False
    )
    op.create_index(op.f("ix_documents_title"), "documents", ["title"], unique=True)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_documents_title"), table_name="documents")
    op.drop_index(op.f("ix_documents_document_type"), table_name="documents")
    op.drop_column("documents", "document_metadata")
    op.drop_column("documents", "document_type")
    op.drop_column("documents", "title")
    # ### end Alembic commands ###
